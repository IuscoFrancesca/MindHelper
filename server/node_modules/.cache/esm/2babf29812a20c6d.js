let Post,cloudinary;_12a‍.x([["createQuestion",()=>createQuestion],["userQuestions",()=>userQuestions],["editUserQuestion",()=>editUserQuestion],["updatePost",()=>updatePost],["deleteQuestion",()=>deleteQuestion],["uploadImage",()=>uploadImage]]);_12a‍.w("../models/question",[["default",["Post"],function(v){Post=v}]]);_12a‍.w("cloudinary",[["default",["cloudinary"],function(v){cloudinary=v}]]);


       const createQuestion = async (req, res) => {
  const { content } = req.body;
  if (!content.length) {
    return res.json({
      error: "Content is required",
    });
  }
  try {
    const post = new Post({ content, postedBy: req.user._id });
    post.save();
    res.json(post);
  } catch (err) {
    _12a‍.g.console.log(err);
    res.sendStatus(400);
  }
};

       const userQuestions = async (req, res) => {
  try {
    //const posts = await Post.find({ postedBy: req.user._id })

    const posts = await Post.find()
      .populate("postedBy", "_id username")
      .sort({ createdAt: -1 })
      .limit(10);
    res.json(posts);
  } catch (err) {
    _12a‍.g.console.log(err);
  }
};

       const editUserQuestion = async (req, res) => {
  try {
    const post = await Post.findById(req.params._id);
    res.json(post);
  } catch (err) {
    _12a‍.g.console.log(err);
  }
};

       const updatePost = async (req, res) => {
  try {
    const post = await Post.findByIdAndUpdate(req.params._id, req.body, {
      new: true,
    });
    res.json(post);
  } catch (err) {
    _12a‍.g.console.log(err);
  }
};

       const deleteQuestion = async (req, res) => {
  try {
    const post = await Post.findByIdAndDelete(req.params._id);
    res.json({ ok: true });
  } catch (err) {
    _12a‍.g.console.log(err);
  }
};
       const uploadImage = async (req, res) => {
  try {
    const result = await cloudinary.uploader.upload(req.files.image.path);
    res.json({
      url: result.secure_url,
      public_id: result.public_id,
    });
  } catch (err) {
    _12a‍.g.console.log(err);
  }
};
